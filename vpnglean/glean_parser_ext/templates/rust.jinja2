// -*- mode: Rust -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.
{# The rendered source is autogenerated, but this
Jinja2 template is not. Please file bugs! #}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

{% if metric_by_type|length > 0 %}
#[allow(dead_code)]
use crate::metrics::MetricId;
use std::collections::HashMap;
use once_cell::sync::Lazy;

{% for typ, metrics in metric_by_type.items() %}
pub static {{typ.0}}: Lazy<HashMap<MetricId, &Lazy<glean::private::{{typ.1}}>>> = Lazy::new(|| {
    let mut map = HashMap::with_capacity({{metrics|length}});
    {% for metric in metrics %}
    map.insert({{metric.0}}.into(), &crate::metrics::og_metrics::{{metric.1}});
    {% endfor %}
    map
});

{% endfor %}
{% endif %}